"""autogenerated by genpy from custom_data/ClientArray.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import custom_data.msg

class ClientArray(genpy.Message):
  _md5sum = "4f52ee794d6a9c771d5f7c0f8c5139b6"
  _type = "custom_data/ClientArray"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Client[] clients
================================================================================
MSG: custom_data/Client
string client_name
float64 posx
float64 posy
"""
  __slots__ = ['clients']
  _slot_types = ['custom_data/Client[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       clients

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ClientArray, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.clients is None:
        self.clients = []
    else:
      self.clients = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.clients)
      buff.write(_struct_I.pack(length))
      for val1 in self.clients:
        _x = val1.client_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2d.pack(_x.posx, _x.posy))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.clients is None:
        self.clients = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.clients = []
      for i in range(0, length):
        val1 = custom_data.msg.Client()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.client_name = str[start:end].decode('utf-8')
        else:
          val1.client_name = str[start:end]
        _x = val1
        start = end
        end += 16
        (_x.posx, _x.posy,) = _struct_2d.unpack(str[start:end])
        self.clients.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.clients)
      buff.write(_struct_I.pack(length))
      for val1 in self.clients:
        _x = val1.client_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2d.pack(_x.posx, _x.posy))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.clients is None:
        self.clients = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.clients = []
      for i in range(0, length):
        val1 = custom_data.msg.Client()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.client_name = str[start:end].decode('utf-8')
        else:
          val1.client_name = str[start:end]
        _x = val1
        start = end
        end += 16
        (_x.posx, _x.posy,) = _struct_2d.unpack(str[start:end])
        self.clients.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d = struct.Struct("<2d")
