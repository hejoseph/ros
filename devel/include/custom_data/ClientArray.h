// Generated by gencpp from file custom_data/ClientArray.msg
// DO NOT EDIT!


#ifndef CUSTOM_DATA_MESSAGE_CLIENTARRAY_H
#define CUSTOM_DATA_MESSAGE_CLIENTARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <custom_data/Client.h>

namespace custom_data
{
template <class ContainerAllocator>
struct ClientArray_
{
  typedef ClientArray_<ContainerAllocator> Type;

  ClientArray_()
    : clients()  {
    }
  ClientArray_(const ContainerAllocator& _alloc)
    : clients(_alloc)  {
    }



   typedef std::vector< ::custom_data::Client_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::custom_data::Client_<ContainerAllocator> >::other >  _clients_type;
  _clients_type clients;




  typedef boost::shared_ptr< ::custom_data::ClientArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_data::ClientArray_<ContainerAllocator> const> ConstPtr;

}; // struct ClientArray_

typedef ::custom_data::ClientArray_<std::allocator<void> > ClientArray;

typedef boost::shared_ptr< ::custom_data::ClientArray > ClientArrayPtr;
typedef boost::shared_ptr< ::custom_data::ClientArray const> ClientArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_data::ClientArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_data::ClientArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace custom_data

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'custom_data': ['/home/joseph/workspace_catkin/src/custom_data/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::custom_data::ClientArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_data::ClientArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_data::ClientArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_data::ClientArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_data::ClientArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_data::ClientArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_data::ClientArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4f52ee794d6a9c771d5f7c0f8c5139b6";
  }

  static const char* value(const ::custom_data::ClientArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4f52ee794d6a9c77ULL;
  static const uint64_t static_value2 = 0x1d5f7c0f8c5139b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_data::ClientArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_data/ClientArray";
  }

  static const char* value(const ::custom_data::ClientArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_data::ClientArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Client[] clients\n\
================================================================================\n\
MSG: custom_data/Client\n\
string client_name\n\
float64 posx\n\
float64 posy\n\
";
  }

  static const char* value(const ::custom_data::ClientArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_data::ClientArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.clients);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ClientArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_data::ClientArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_data::ClientArray_<ContainerAllocator>& v)
  {
    s << indent << "clients[]" << std::endl;
    for (size_t i = 0; i < v.clients.size(); ++i)
    {
      s << indent << "  clients[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::custom_data::Client_<ContainerAllocator> >::stream(s, indent + "    ", v.clients[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_DATA_MESSAGE_CLIENTARRAY_H
